import * as React from "react";
import Box from "@mui/material/Box";
import { DataGrid } from "@mui/x-data-grid";
import VisibilityIcon from "@mui/icons-material/Visibility";
import { useState } from "react";
import DisplayTicketDetails from "./Tickets/DisplayTicketDetails";

export default function NotificationGrid({ rows }) {
  const apiUrl = process.env.REACT_APP_API_URL;
  const [selectedTicketDetails, setSelectedTicketDetails] = useState(null);
  const [isTicketDetailsOpen, setIsTicketDetailsOpen] = useState(false);
  const fetchTicketDetails = async (ticketId) => {
    try {
      const response = await fetch(`${apiUrl}/api/tickets/${ticketId}`);
      if (response.ok) {
        const data = await response.json();
        setSelectedTicketDetails(data.payload);
        setIsTicketDetailsOpen(true);
      } else {
        console.error("Error fetching ticket details");
      }
    } catch (error) {
      console.error("Error fetching ticket details", error);
    }
  };
  const closeTicketDetailsModal = () => {
    setIsTicketDetailsOpen(false);
  };
  const columns = [
    {
      field: "assignorDepartment",
      headerName: "Generated By",
      minWidth: 150,
      sortable: false,
      disableColumnMenu: true,
      headerClassName: "theme--header",
      flex: 3,
      align: "center",
      headerAlign: "center",
    },
    {
      field: "client_name",
      headerName: "Business Name",
      minWidth: 150,
      sortable: false,
      disableColumnMenu: true,
      headerClassName: "theme--header",
      flex: 3,
      align: "center",
      headerAlign: "center",
    },
    {
      field: "majorAssignee",
      headerName: "Assigned For",
      minWidth: 150,
      sortable: false,
      disableColumnMenu: true,
      headerClassName: "theme--header",
      flex: 3,
      align: "center",
      headerAlign: "center",
    },
    {
      field: "user_name",
      headerName: "By User",
      maxWidth: 80,
      sortable: false,
      disableColumnMenu: true,
      headerClassName: "theme--header",
      flex: 3,
      align: "center",
      headerAlign: "center",
    },
    {
      field: "createdAt",
      headerName: "Date of Creation",
      type: "number",
      minWidth: 150,
      sortable: false,
      disableColumnMenu: true,
      headerClassName: "theme--header",
      align: "center",
      headerAlign: "center",
      flex: 3,
      valueGetter: ({ row }) => new Date(row.createdAt).toDateString(),
    },
    {
      field: "dueDate",
      headerName: "Due Date",
      sortable: false,
      disableColumnMenu: true,
      headerClassName: "theme--header",
      flex: 3,
      minWidth: 200,
      align: "center",
      headerAlign: "center",
      valueGetter: ({ row }) => new Date(row.dueDate).toDateString(),
    },
    {
      field: "details",
      headerName: "Details",
      sortable: false,
      disableColumnMenu: true,
      headerClassName: "theme--header",
      flex: 3,
      align: "center",
      headerAlign: "center",
      renderCell: (params) => (
        <div style={{ textAlign: "center" }}>
          <VisibilityIcon
            onClick={() => fetchTicketDetails(params.row.ticket_Id)}
            style={{ cursor: "pointer" }}
          />
        </div>
      ),
    },
  ];
  return (
    <>
      <Box sx={{ height: 400, width: "100%" }}>
        <DataGrid
          disableRowSelectionOnClick
          getRowId={(row) => row._id}
          rows={rows}
          columns={columns}
          initialState={{
            pagination: {
              paginationModel: {
                pageSize: 5,
              },
            },
          }}
          pageSizeOptions={[5]}
          sx={{
            "& .theme--header": {
              backgroundColor: "primary.main",
              display: "flex",
              color: "white",
              border: "none !important",
              outline: "none !important",
              fontSize: "0.9rem",
            },
            "& .MuiDataGrid-columnSeparator": {
              display: "none",
            },
          }}
        />
      </Box>
      {selectedTicketDetails && (
        <DisplayTicketDetails
          open={isTicketDetailsOpen}
          handleClose={closeTicketDetailsModal}
          ticketDetails={selectedTicketDetails}
        />
      )}
    </>
  );
}
